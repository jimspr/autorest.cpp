@using System.Globalization
@using System.Linq;
@using System
@using AutoRest.Core.Model
@using AutoRest.Core.Utilities
@using AutoRest.Cpp
@using AutoRest.Cpp.Model
@using AutoRest.Extensions
@inherits AutoRest.Core.Template<AutoRest.Cpp.Model.MethodCpp>

@if (!string.IsNullOrWhiteSpace(Model.Description) || !string.IsNullOrEmpty(Model.Summary))
{
@:/// <summary>
@:@WrapComment("/// ", String.IsNullOrEmpty(Model.Summary) ? Model.Description.EscapeXmlComment() : Model.Summary.EscapeXmlComment())
    if (!string.IsNullOrEmpty(Model.ExternalDocsUrl))
    {
@:/// <see href="@Model.ExternalDocsUrl" />
    }
@:/// </summary>
}
@if (!String.IsNullOrEmpty(Model.Description) && !String.IsNullOrEmpty(Model.Summary))
{
@:/// <remarks>
@:@WrapComment("/// ", Model.Description.EscapeXmlComment())
@:/// </remarks>
}
@foreach (var parameter in Model.LocalParameters)
{
@:/// <param name='@parameter.Name'>
@WrapComment("/// ", parameter.Documentation.EscapeXmlComment())@:
@:/// </param>
}
/// <param name='customHeaders'>
/// Headers that will be added to request.
/// </param>
/// <param name='cancellationToken'>
/// The cancellation token.
/// </param>
/// <exception cref="@(Model.OperationExceptionTypeString)">
/// Thrown when the operation returned an invalid status code
/// </exception>
@if (Model.Responses.Where(r => r.Value.Body != null).Any())
{
@:/// <exception cref="Microsoft.Rest.SerializationException">
@:/// Thrown when unable to deserialize the response
@:/// </exception>
}
@if (Model.Parameters.Cast<ParameterCpp>().Any(p => !p.IsConstant && p.IsRequired &&p.IsNullable()))
{
@:/// <exception cref="Microsoft.Rest.ValidationException">
@:/// Thrown when a required parameter is null
@:/// </exception>
@:/// <exception cref="System.ArgumentNullException">
@:/// Thrown when a required parameter is null
@:/// </exception>
    }
/// <return>
/// A response object containing the response body and response headers.
/// </return>
@if (Model.Deprecated)
{
@:[[deprecated]]
}
future_t<@(Model.OperationResponseReturnTypeString)> @(Model.ClassName)::@(Model.Name)(@(Model.GetAsyncMethodParameterDeclaration(true, false)))
{
    auto curl = curl_easy_init();

    @foreach (ParameterCpp parameter in Model.Parameters.Where(p => !p.IsConstant))
    {
        if (parameter.IsRequired && parameter.IsNullable())
        {
    @:if (!@(parameter.Name).has_value())
    @:{
        @:throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "@(parameter.Name)");
    @:}
@:
        }
        if(parameter.CanBeValidated  && (Model.HttpMethod != HttpMethod.Patch || parameter.Location != ParameterLocation.Body))
        {
            string output;
            if (parameter.IsNullable())
            {
                output = parameter.ModelType.ValidateType(Model, parameter.Name + ".value()", parameter.Constraints);
            }
            else
            {
                output = parameter.ModelType.ValidateType(Model, parameter.Name, parameter.Constraints);
            }
            if ((output != null) && (output != ""))
            {
                if (parameter.IsNullable())
                {
<text>
    if (@(parameter.Name).has_value())
    {
        @(output)
    }
</text>
                }
                else
                {
<text>
    @(output)
</text>
                }
            }
        }
    }

    @foreach (ParameterCpp parameter in Model.Parameters)
    {
        if (parameter.IsConstant && !parameter.IsClientProperty)
        {
    @:@(parameter.ModelTypeName) @(parameter.Name) = @(parameter.DefaultValue);
        }

        if (parameter.ModelType is CompositeType
            && !parameter.IsConstant
            && parameter.IsRequired
            && !parameter.IsClientProperty
            && ((CompositeType)parameter.ModelType).ContainsConstantProperties)
        {
    @://if (@(parameter.Name) == null)
    @://{
    @://    @(parameter.Name) = new @(parameter.ModelTypeName)();
    @://}
        }

    }
    @Model.BuildInputMappings()

    // Construct URL
@if (Model.IsAbsoluteUrl)
{
    @:string _url = "@(Model.Url)";
}
else
{
if (Model.IsCustomBaseUri)
{
//    @:var _baseUrl = @(Model.ClientReference).BaseUri;
//    @:var _url = _baseUrl + (_baseUrl.EndsWith("/") ? "" : "/") + "@(Model.Url.TrimStart('/'))";

    @:auto& _baseUrl = @(Model.ClientReference).base_uri;
    @:auto _url = _baseUrl + "/" + "@(Model.Url.TrimStart('/'))";
}
else
{
    @:auto& _baseUrl = @(Model.ClientReference).base_uri;
//    @:var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "@(Model.Url.TrimStart('/'))").ToString();
    @:auto _url = _baseUrl + "/" + "@(Model.Url.TrimStart('/'))";
}    
}
    @(Model.BuildUrl("_url"))

    std::map<string, string> headers;

    curl_easy_setopt(curl, CURLOPT_URL, _url.c_str());
    @switch (Model.HttpMethod)
    {
    case HttpMethod.None:
    @:HttpMethod.None not supported...
        break;
    case HttpMethod.Get:
    @:curl_easy_setopt(curl, CURLOPT_HTTPGET, 1L);
        break;
    case HttpMethod.Post:
    @:curl_easy_setopt(curl, CURLOPT_POST, 1L);
    @:curl_easy_setopt(curl, CURLOPT_POSTFIELDSIZE, 0);
        break;
    case HttpMethod.Put:
    @:curl_easy_setopt(curl, CURLOPT_PUT, 1L);
        break;
    case HttpMethod.Patch:
    @:curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, "PATCH");
        break;
    case HttpMethod.Delete:
    @:curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, "DELETE");
        break;
    case HttpMethod.Head:
    @:curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, "HEAD");
    @:curl_easy_setopt(curl, CURLOPT_NOBODY, 1L); // no body will be sent so don't wait
        break;
    case HttpMethod.Options:
    @:curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, "OPTIONS");
        break;
    default:
    @:error - HttpMethod not supported...
        break;
    }
    
    // Set Headers
    @(Model.SetDefaultHeaders)
    @foreach (var parameter in Model.LogicalParameters.OfType<ParameterCpp>().Where(p => p.Location == ParameterLocation.Header && !p.IsHeaderCollection))
    {
        if (!parameter.IsNullable())
        {
    @:headers["@(parameter.SerializedName)"] = @parameter.ModelType.ToString(Model.ClientReference, parameter.Name);
        }
        else
        {
    @:if (@(parameter.Name).has_value())
    @:{
    @:    headers["@(parameter.SerializedName)"] = @(parameter.ModelType.ToString(Model.ClientReference, parameter.Name + ".value()"));
    @:}
        }
    }
    @EmptyLine
    @foreach (var parameter in Model.LogicalParameters.OfType<ParameterCpp>().Where(p => p.Location == ParameterLocation.Header && p.IsHeaderCollection))
    {
    @:if (@(parameter.Name).has_value())
    @:{
    @:    for (auto& _header: @(parameter.Name).value())
    @:    {
    @:        auto key = std::string("@(parameter.HeaderCollectionPrefix)") + _header.first;
    @:        headers[key] = _header.second;
    @:    }
    @:}
    }
    @EmptyLine
    for (auto& header: customHeaders)
    {
        headers[header.first] = header.second;
    }
    @EmptyLine

    struct curl_slist *sheaders = nullptr;
    sheaders = curl_slist_append(sheaders, "accept: application/json");
    sheaders = curl_slist_append(sheaders, "content-type: application/json; charset=utf-8");
    for (auto& header : headers)
    {
        std::string str = header.first + ": " + header.second;
        sheaders = curl_slist_append(sheaders, str.c_str());
    }
    curl_easy_setopt(curl, CURLOPT_HTTPHEADER, sheaders);

    // Serialize Request
    rapidjson::MemoryPoolAllocator<> allocator;
    @if (Model.RequestBody != null)
    {
        // nullable/no, has_value, null/non-null, stream/no, required
        if (Model.RequestBody.ModelType.IsPrimaryType(KnownPrimaryType.Stream))
        {
            if (!Model.RequestBody.IsNullable())
            {
<text>
    auto& requestBody = @(Model.RequestBody.Name);
    curl_easy_setopt(curl, CURLOPT_POSTFIELDSIZE, requestBody.size());
    curl_easy_setopt(curl, CURLOPT_COPYPOSTFIELDS, requestBody.c_str());
</text>
            }
            else // optional
            {
<text>
    if (@(Model.RequestBody.Name).has_value())
    {
        //TODO - support streaming (uv_stream_t)
        auto& requestBody = @(Model.RequestBody.Name).value();
        if (!requestBody.empty())
        {
            curl_easy_setopt(curl, CURLOPT_POSTFIELDSIZE, requestBody.size());
            curl_easy_setopt(curl, CURLOPT_COPYPOSTFIELDS, requestBody.c_str());
        }
    }
</text>
                if (Model.RequestBody.IsRequired)
                {
<text>
    else
    {
      throw validation_exception_t{};
    }
</text>
                }
            }
        }
        else
        {
            if (Model.RequestContentType.StartsWith("application/xml"))
            {
    @:// application/xml not supported...
    @: DebugBreak();
            }
            else
            {
                if (!Model.RequestBody.IsNullable())
                {
<text>
    rapidjson::StringBuffer buffer;
    rapidjson::Writer<rapidjson::StringBuffer> writer(buffer);
    auto value = json_serialize(@(Model.RequestBody.Name), allocator);
    value.Accept(writer);
    curl_easy_setopt(curl, CURLOPT_POSTFIELDSIZE, buffer.GetSize());
    curl_easy_setopt(curl, CURLOPT_COPYPOSTFIELDS, buffer.GetString());
</text>
                } else {
<text>
    if(@(Model.RequestBody.Name).has_value())
    {
        rapidjson::StringBuffer buffer;
        rapidjson::Writer<rapidjson::StringBuffer> writer(buffer);
        auto value = json_serialize(@(Model.RequestBody.Name), allocator);
        value.Accept(writer);
        curl_easy_setopt(curl, CURLOPT_POSTFIELDSIZE, buffer.GetSize());
        curl_easy_setopt(curl, CURLOPT_COPYPOSTFIELDS, buffer.GetString());
    }
</text>
                }
            }
        }
    }
    else if (Model.LogicalParameters.Any(p => p.Location == ParameterLocation.FormData))
    {
    @:curl_httppost* post = nullptr;
    @:curl_httppost* last = nullptr;
    
        foreach (ParameterCpp parameter in Model.LogicalParameters.Where(p => p.Location == ParameterLocation.FormData))
        {
    @:if (@(parameter.Name).has_value())
    @:{
        @{ string localParam = "_"+ @parameter.Name.Value.Replace("this.", ""); }
        if (parameter.ModelType.IsPrimaryType(KnownPrimaryType.Stream))
        {
        <text>        
//         auto stream = file.value();
         std::string& @(localParam) = file.value();
//         std::string @(localParam) = co_await stream_to_string(stream);

//         System.Net.Http.StreamContent _@parameter.Name = new System.Net.Http.StreamContent(@parameter.Name);
//        @(localParam).Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("application/octet-stream");
//        System.IO.FileStream @(localParam)AsFileStream = @parameter.Name as System.IO.FileStream;
//        if (@(localParam)AsFileStream != null)
//        {
//            System.Net.Http.Headers.ContentDispositionHeaderValue _contentDispositionHeaderValue = new System.Net.Http.Headers.ContentDispositionHeaderValue("form-data");
//            _contentDispositionHeaderValue.Name = "@(parameter.SerializedName)";
//            _contentDispositionHeaderValue.FileName = @(localParam)AsFileStream.Name;
//            @(localParam).Headers.ContentDisposition = _contentDispositionHeaderValue;        
//        }    
</text>
        @:curl_formadd(&post, &last, CURLFORM_COPYNAME, "@(parameter.SerializedName)", CURLFORM_FILE, @(localParam).c_str(), CURLFORM_END);
            }
            else
            {
        @:std::string @(localParam) = @(parameter.ModelType.ToString(Model.ClientReference, parameter.Name)).value();
        @:curl_formadd(&post, &last, CURLFORM_COPYNAME, "@(parameter.SerializedName)", CURLFORM_COPYCONTENTS, @(localParam).c_str(), CURLFORM_END);
            }
    @:}
        }
    @:curl_easy_setopt(curl, CURLOPT_HTTPPOST, post);
    }

    @if (Settings.AddCredentials)
    {
        <text>
    // Set Credentials
    if (@(Model.ClientReference).Credentials != null)
    {
        cancellationToken.throw_if_cancellation_requested();
        await @(Model.ClientReference).Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
    }
        </text>
    }
    
    // Send Request
    cancellationToken.throw_if_cancellation_requested();
    @if (Model.ReturnType.Body.IsPrimaryType(KnownPrimaryType.Stream) || Model.HttpMethod == HttpMethod.Head)
    {
    @:// TODO - add support for returning once headers are read but before content is available
    @://_httpResponse = await @(Model.ClientReference).HttpClient.SendAsync(_httpRequest, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
    @:@(Model.OperationResponseReturnTypeString) _httpResponse = co_await root_handler.invoke(curl);
    }
    else
    {
    @:@(Model.OperationResponseReturnTypeString) _httpResponse = co_await root_handler.invoke(curl);
    }
    cancellationToken.throw_if_cancellation_requested();
    // Dispatch based on response
    switch (_httpResponse.http_code)
    {
        @if (Model.Responses.Any())
        {
            foreach (var response in Model.Responses)
            {
                var responseStatus = response.Key;
                var body = response.Value.Body;
                if (body != null)
                {
                    if (body.IsPrimaryType(KnownPrimaryType.Stream))
                    {
<text>
    case @(MethodCpp.GetStatusCodeReference(responseStatus)):
        {
        // TODO not done ...
        //_result.Body = await _httpResponse.Content.ReadAsStreamAsync().ConfigureAwait(false);
        //    <!--auto stream = _httpResponse.object.value().get<0>();
        //    auto str = stream_to_string(stream);
        //    rapidjson::Document d;
        //    rapidjson::ParseResult result = d.Parse(str.c_str());
        //    if (result)
        //      _httpResponse.object = json_deserialize<@(body.DeclarationName)>(d);-->
        }
        break;
</text>
                    }
                    else
                    {
<text>
    case @(MethodCpp.GetStatusCodeReference(responseStatus)):
        {
            rapidjson::Document d;
            rapidjson::ParseResult result = d.Parse(_httpResponse.str.c_str());
            if (result)
            {
//                @(body.AsNullableType(Model.IsXNullableReturnType)) obj;
//                @(body.DeclarationName) obj = json_deserialize<@(body.DeclarationName)>(d);
                _httpResponse.object = json_deserialize<@(body.DeclarationName)>(d);
            }
        }
        break;
</text>
                    }
                }
                else
                {
<text>
    case @(MethodCpp.GetStatusCodeReference(responseStatus)):
        // No body specified for this response.
        break;
</text>
                }
            }
        }

    default:
    @if (Model.DefaultResponse.Body != null)
    {
        var body = Model.DefaultResponse.Body;
        if (body.IsPrimaryType(KnownPrimaryType.Stream))
        {
        @:// TODO ...
        @:_result.Body = await _httpResponse.Content.ReadAsStreamAsync().ConfigureAwait(false);
        }
        else
        {
<text>
        {
            rapidjson::Document d;
            rapidjson::ParseResult result = d.Parse(_httpResponse.str.c_str());
            if (result)
            {
                @(body.AsNullableType(Model.IsXNullableReturnType)) obj;
                json_deserialize(obj, d);
            }
        }
</text>
        }
    }
    else
    {
        @:// no default response specified so throw if not success
        @://if (!_httpResponse.is_success())
        @://    throw _httpResponse;
    }
        break;
    }
    
    @if (Model.ReturnType.Headers != null)
    {
        @://TODO...
        @:auto& response_headers = _httpResponse.headers;
//    @:try
//    @:{
//        @:_result.Headers = _httpResponse.GetHeadersAsJson().ToObject<@(Model.ReturnType.Headers.Name)>(Newtonsoft.Json.JsonSerializer.Create(@(Model.GetDeserializationSettingsReference(Model.DefaultResponse.Body))));
//        foreach (var property in (Model.ReturnType.Headers as CompositeType).Properties.OfType<PropertyCpp>().Where(p => p.IsHeaderCollection))
//        {
//        @:_result.Headers.@(property.Name) = new @(property.ModelTypeName.Replace("IDictionary", "Dictionary"))();
//        @:foreach (var header in _httpResponse.Headers)
//        @:{
//        @:    if (header.Key.StartsWith("@(property.HeaderCollectionPrefix)"))
//        @:    {
//        @:        _result.Headers.@(property.Name)[header.Key.Replace("@(property.HeaderCollectionPrefix)", "")] = header.Value.FirstOrDefault() as @((property.ModelType as DictionaryType).ValueType.Name);
//        @:    }
//        @:}
//        }
//    @:}
//    @:catch (Newtonsoft.Json.JsonException ex)
//    @:{
//    @:    _httpRequest.Dispose();
//    @:    if (_httpResponse != null)
//    @:    {
//    @:        _httpResponse.Dispose();
//    @:    }
//    @:    throw new Microsoft.Rest.SerializationException("Unable to deserialize the headers.", _httpResponse.GetHeadersAsJson().ToString(), ex);
//    @:}
    }

    curl_easy_cleanup(curl);

    //return _result;
    return _httpResponse;
}
