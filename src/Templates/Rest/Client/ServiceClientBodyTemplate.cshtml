@using System
@using System.Linq
@using AutoRest.Core.Model
@using AutoRest.Core.Utilities
@inherits AutoRest.Core.Template<AutoRest.Cpp.Model.CodeModelCpp>

/// <summary>
/// The base URI of the service.
/// </summary>
std::string base_uri;
@EmptyLine

/// <summary>
/// Gets or sets json serialization settings.
/// </summary>
//public Newtonsoft.Json.JsonSerializerSettings SerializationSettings { get; private set; }
@EmptyLine

/// <summary>
/// Gets or sets json deserialization settings.
/// </summary>
//public Newtonsoft.Json.JsonSerializerSettings DeserializationSettings { get; private set; }
@EmptyLine
        
@foreach (var property in Model.Properties)
{
@:/// <summary>
@:@WrapComment("/// ", property.Documentation.EscapeXmlComment())
@:/// </summary>
//@:public @property.ModelTypeName @property.Name { get; @(property.IsReadOnly || property.IsConstant ? "private " : "")set; }
@:@property.ModelTypeName @property.Name;
@EmptyLine
}
        
@foreach (var operation in Model.AllOperations) 
{
@:/// <summary>
@:/// Gets the I@(operation.TypeName).
@:/// </summary>
//@:public virtual I@(operation.TypeName) @(operation.NameForProperty) { get; private set; }
@:@(operation.TypeName) @(operation.NameForProperty) {*this};
@EmptyLine
}

@(Model.ContainsCredentials ? "protected" : Model.ConstructorVisibility):
       
/// <summary>
/// Initializes a new instance of the @Model.Name class.
/// </summary>
/// <param name='handlers'>
/// Optional. The delegating handlers to add to the http client pipeline.
/// </param>
//@(Model.Name)(const std::vector<delegating_handler_t>& handlers) : service_client_t(handlers)
//{
//    this->Initialize();
//}
@EmptyLine

/// <summary>
/// Initializes a new instance of the @Model.Name class.
/// </summary>
/// <param name='rootHandler'>
/// Optional. The http client handler used to handle http transport.
/// </param>
/// <param name='handlers'>
/// Optional. The delegating handlers to add to the http client pipeline.
/// </param>
@(Model.Name)(curl_requester_t& rootHandler, const std::vector<delegating_handler_t>& handlers) : service_client_t(rootHandler, handlers)
{
    this->Initialize();
}
@EmptyLine

@if(!Model.IsCustomBaseUri)
{ 
@:/// <summary>
@:/// Initializes a new instance of the @Model.Name class.
@:/// </summary>
@:/// <param name='baseUri'>
@:/// Optional. The base URI of the service.
@:/// </param>
@:/// <param name='handlers'>
@:/// Optional. The delegating handlers to add to the http client pipeline.
@:/// </param>
@:/// <exception cref="System.ArgumentNullException">
@:/// Thrown when a required parameter is null
@:/// </exception>
//@:@(Model.Name)(const std::string& baseUri, const std::vector<delegating_handler_t>& handlers) : this(handlers)
//@:{
//@:    base_uri = baseUri;
//@:}
@:@EmptyLine 

@:/// <summary>
@:/// Initializes a new instance of the @Model.Name class.
@:/// </summary>
@:/// <param name='baseUri'>
@:/// Optional. The base URI of the service.
@:/// </param>
@:/// <param name='rootHandler'>
@:/// Optional. The http client handler used to handle http transport.
@:/// </param>
@:/// <param name='handlers'>
@:/// Optional. The delegating handlers to add to the http client pipeline.
@:/// </param>
@:/// <exception cref="System.ArgumentNullException">
@:/// Thrown when a required parameter is null
@:/// </exception>
@:@(Model.Name)(const std::string& baseUri, curl_requester_t& rootHandler, const std::vector<delegating_handler_t>& handlers) : @(Model.Name)(rootHandler, handlers)
@:{
@:    base_uri = baseUri;
@:}
@:@EmptyLine
}

@{var parameters = Model.Properties.Where(p => p.IsRequired && p.IsReadOnly);}
@if (parameters.Any())
{
@:/// <summary>
@:/// Initializes a new instance of the @Model.Name class.
@:/// </summary>
foreach (var param in parameters)
{
@:/// <param name='@(param.Name.ToCamelCase())'>
@:/// Required. @(param.Documentation)
@:/// </param>
}
@:/// <param name='handlers'>
@:/// Optional. The delegating handlers to add to the http client pipeline.
@:/// </param>
@:/// <exception cref="System.ArgumentNullException">
@:/// Thrown when a required parameter is null
@:/// </exception>
@:@(Model.ConstructorVisibility) @(Model.Name)(@(Model.RequiredConstructorParameters), const std::vector<delegating_handler_t>& handlers) : this(handlers)
@:{
foreach (var param in parameters)
{
@:    if (@(param.Name.ToCamelCase()) == null)
@:    {
@:        throw new System.ArgumentNullException("@(param.Name.ToCamelCase())");
@:    }
}
foreach (var param in parameters)
{
@:    this->@(param.Name) = @(param.Name.ToCamelCase());
    @if (param.ModelType.IsPrimaryType(KnownPrimaryType.Credentials))
    {
    @:if (this->Credentials != null)
    @:{
    @:    this->Credentials.InitializeServiceClient(this);
    @:}
    }
}
@:}
@:@EmptyLine
        
@:/// <summary>
@:/// Initializes a new instance of the @Model.Name class.
@:/// </summary>
foreach (var param in parameters)
{
@:/// <param name='@(param.Name.ToCamelCase())'>
@:/// Required. @(param.Documentation)
@:/// </param>
}
@:/// <param name='rootHandler'>
@:/// Optional. The http client handler used to handle http transport.
@:/// </param>
@:/// <param name='handlers'>
@:/// Optional. The delegating handlers to add to the http client pipeline.
@:/// </param>
@:/// <exception cref="System.ArgumentNullException">
@:/// Thrown when a required parameter is null
@:/// </exception>
@:@(Model.ConstructorVisibility) @(Model.Name)(@(Model.RequiredConstructorParameters), curl_requester_t& rootHandler, const std::vector<delegating_handler_t>& handlers) : this(rootHandler, handlers)
@:{
foreach (var param in parameters)
{
@:    if (@(param.Name.ToCamelCase()) == null)
@:    {
@:        throw new System.ArgumentNullException("@(param.Name.ToCamelCase())");
@:    }
}
foreach (var param in parameters)
{
@:    this->@(param.Name) = @(param.Name.ToCamelCase());
    @if (param.ModelType.IsPrimaryType(KnownPrimaryType.Credentials))
    {
    @:if (this->Credentials != null)
    @:{
    @:    this->Credentials.InitializeServiceClient(this);
    @:}
    }
}
@:}
@:@EmptyLine

if(!Model.IsCustomBaseUri)
{ 
@:/// <summary>
@:/// Initializes a new instance of the @Model.Name class.
@:/// </summary>
@:/// <param name='baseUri'>
@:/// Optional. The base URI of the service.
@:/// </param>
foreach (var param in parameters)
{
@:/// <param name='@(param.Name.ToCamelCase())'>
@:/// Required. @(param.Documentation)
@:/// </param>
}
@:/// <param name='handlers'>
@:/// Optional. The delegating handlers to add to the http client pipeline.
@:/// </param>
@:/// <exception cref="System.ArgumentNullException">
@:/// Thrown when a required parameter is null
@:/// </exception>
@:@(Model.ConstructorVisibility) @(Model.Name)(System.Uri baseUri, @(Model.RequiredConstructorParameters), const std::vector<delegating_handler_t>& handlers) : this(handlers)
@:{
@:    if (baseUri == null)
@:    {
@:        throw new System.ArgumentNullException("baseUri");
@:    }
    foreach (var param in parameters)
    {
@:    if (@(param.Name.ToCamelCase()) == null)
@:    {
@:        throw new System.ArgumentNullException("@(param.Name.ToCamelCase())");
@:    }
}

@:    this->base_uri = baseUri;

foreach (var param in parameters)
{
@:    this->@(param.Name) = @(param.Name.ToCamelCase());

@if (param.ModelType.IsPrimaryType(KnownPrimaryType.Credentials))
{
    @:if (this->Credentials != null)
    @:{
    @:    this->Credentials.InitializeServiceClient(this);
    @:}
}
}
@:}
@:@EmptyLine
        
@:/// <summary>
@:/// Initializes a new instance of the @Model.Name class.
@:/// </summary>
@:/// <param name='baseUri'>
@:/// Optional. The base URI of the service.
@:/// </param>
foreach (var param in parameters)
{
@:/// <param name='@(param.Name.ToCamelCase())'>
@:/// Required. @(param.Documentation)
@:/// </param>
}
@:/// <param name='rootHandler'>
@:/// Optional. The http client handler used to handle http transport.
@:/// </param>
@:/// <param name='handlers'>
@:/// Optional. The delegating handlers to add to the http client pipeline.
@:/// </param>
@:/// <exception cref="System.ArgumentNullException">
@:/// Thrown when a required parameter is null
@:/// </exception>
@:@(Model.ConstructorVisibility) @(Model.Name)(System.Uri baseUri, @(Model.RequiredConstructorParameters), curl_requester_t& rootHandler, const std::vector<delegating_handler_t>& handlers) : this(rootHandler, handlers)
@:{
@:    if (baseUri == null)
@:    {
@:        throw new System.ArgumentNullException("baseUri");
@:    }

foreach (var param in parameters)
{
@:    if (@(param.Name.ToCamelCase()) == null)
@:    {
@:        throw new System.ArgumentNullException("@(param.Name.ToCamelCase())");
@:    }
}

@:    this->base_uri = baseUri;

foreach (var param in parameters)
{
@:    this->@(param.Name) = @(param.Name.ToCamelCase());

@if (param.ModelType.IsPrimaryType(KnownPrimaryType.Credentials))
{
    @:if (this->Credentials != null)
    @:{
    @:    this->Credentials.InitializeServiceClient(this);
    @:}
}
}
@:}
@:@EmptyLine
}
}